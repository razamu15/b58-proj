module project
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
        LEDR,
        SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B,   						//	VGA Blue[9:0]
		HEX0 	// TODO: Take this out, this is for debugging
	);

	input			CLOCK_50;				//	50 MHz
	input   [17:0]   SW;
	output   [17:0]   LEDR;

	output [6:0] HEX0;
	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	wire resetn;
	assign resetn = SW[17];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.
	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	//assign writeEn = SW[16];
	assign x = 8'b01010101;
	assign y = 7'b0101010;

	wire [7:0] x_plot;
	wire [6:0] y_plot;
	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x_plot),
			.y(y_plot),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn/plot
	// for the VGA controller, in addition to any other functionality your design may require.
    
    // Instansiate datapath
	// datapath d0(...);

    // Instansiate FSM control
    // control c0(...);
	 
	wire clock;
	wire [19:0] clock_iteration;
	modified_clock mc (.hit_cycle(clock), .cur_iter(clock_iteration), .next_iter(clock_iteration), .clock(CLOCK_50));
	control_path cp (.clock(clock), .x(x), .x_out(x_plot), .y(x), .y_out(y_plot), .colour(colour), .plot(writeEn), .go(1'b1), .check_plot(LEDR[17]), .check_colour(LEDR[2:0]), .check_counter(LEDR[10:9]));

endmodule



module control_path(
    input clock,
    input resetn,
    input go,
    input [7:0] x,
    input [6:0] y,
    output reg [2:0] colour,
	 output reg  plot,
    output reg [7:0] x_out,
    output reg [6:0] y_out,
	 output reg check_plot,
	 output reg [2:0] check_colour,
	 output reg [1:0] check_counter
    );
	
	 
    reg [4:0] current_state, next_state; 
    
    localparam  S_DRAW_SQ = 4'd0,
					S_ERASE_SQ = 4'd1,
					S_WAIT = 4'd2;
	
    
	reg square_completed;
	always @(*)
	begin
		square_completed = 1'b0;
		if (counter_val == 2'b11)
		begin // then the square is completed
			square_completed = 1'b1;
		end
	end
	 
	wire [1:0] counter_val;
	// Counter to shift the coord of x & y in the square
	counter c1 (.in(counter_val), .out(counter_val), .clock(clock) );
	wire wait_finished;
	//shift_start_row shifter (.out_row(x), .in_row(x), .go(clock));

    // Next state logic aka our state table
    always@(*) //Verify this FSM makes sense transition wise
    begin: state_table 
            case (current_state)
			// Move on the erase state if all shifts have
			// been applied (x = x + 1, y = y + 1)
			S_DRAW_SQ: next_state =  (square_completed) ? S_ERASE_SQ : S_DRAW_SQ;
			// If we finished applying the shifts to the x & 				// y, wait for the go signal to start drawing the 			// next square, which will be shifted down one.
			S_ERASE_SQ: next_state =  (square_completed) ? S_DRAW_SQ : S_ERASE_SQ; 
			S_WAIT: next_state = (wait_finished) ? S_DRAW_SQ : S_WAIT; // TODO: LOOK HERE FOR BAD wiat_finished
         default:   next_state = S_DRAW_SQ;
        endcase
    end // state_table
   

    // Output logic aka all of our datapath control signals
    always @(posedge clock)
    begin: enable_signals
        // By default make all our signals 0
        plot = 1'b1;
        colour = 3'b100;
		  check_counter = counter_val;
        case (current_state)
 			S_DRAW_SQ:
			begin // Taking the given values and plotting
				x_out = x + counter_val[0];
				y_out = y + counter_val[1];
				colour = 3'b010; // Colour for the tiles
				plot = 1'b1;
				check_plot = plot;
				check_colour = colour;
				if (square_completed)
					begin
						plot = 1'b0; // Don't want to plot before we transition to next state
					end
 			end
			S_ERASE_SQ:
			begin // Taking the given values and plotting
				x_out = x + counter_val[0];
				y_out = y + counter_val[1];
				colour = 3'b101; // Colour for thebackground
				plot = 1'b1;
				check_plot = plot;
				check_colour = colour;
//				if (square_completed)
//					begin
//						plot = 1'b0; (Yoinks the last square)
// Only need to prevent square from flashing different colour, which i think is a timing issue
//					end
 			end
			S_WAIT:
			begin // Don't draw anything
				colour = 3'b110;
				plot = 1'b0; // TODO: CHANGE TO 0
 			end
			default: 
			begin
			plot = 1'b0; // TODO: CHANGE TO 0
			colour = 3'b011;
			end 
        endcase
		  
    end // enable_signals
	 
	 
always @(posedge clock)
begin: state_FFs
current_state <= next_state;
end
	 
 endmodule


module counter (out, in, clock);

output reg [1:0] out;
input [1:0] in;
input clock;

always @(posedge clock)
begin
	if (in == 2'b11)
	begin
		out = 2'b00;
	end
	else
	begin
		out = in + 2'b01;
	end
	
end


endmodule

module shift_start_row (out_row, in_row, go);
// Only shift the start of the row 
output reg [7:0] out_row;
input [7:0] in_row;
input go;

always @(posedge go)
begin // TODO: CHECK ON ROW LIMIT
	out_row = in_row + 7'b0000001;
end

endmodule

module modified_clock (hit_cycle, cur_iter, next_iter, clock);
input clock;
input [19:0] cur_iter; // the current value in the iteration
output reg [19:0] next_iter; // next iteration's value
output reg hit_cycle; // reg telling us whether this clock cycle hit the cycle
localparam goal_speed = 20'b11001011011100110101;
always @(posedge clock)
begin
    if(cur_iter == goal_speed)  begin
    hit_cycle <= 1'b1; // then we hit our cycle, output 1
    next_iter <= 20'b00000000000000000000; // start counting again in the next iteration
    end
    else begin
    hit_cycle <= 1'b0; // we didn't hitthe cycle, increment and try again
    next_iter <= cur_iter + 1'b1;
    end
end
endmodule


module hex_display(IN, OUT);
    input [3:0] IN;
	 output reg [7:0] OUT;
	 
	 always @(*)
	 begin
		case(IN[3:0])
			4'b0000: OUT = 7'b1000000;
			4'b0001: OUT = 7'b1111001;
			4'b0010: OUT = 7'b0100100;
			4'b0011: OUT = 7'b0110000;
			4'b0100: OUT = 7'b0011001;
			4'b0101: OUT = 7'b0010010;
			4'b0110: OUT = 7'b0000010;
			4'b0111: OUT = 7'b1111000;
			4'b1000: OUT = 7'b0000000;
			4'b1001: OUT = 7'b0011000;
			4'b1010: OUT = 7'b0001000;
			4'b1011: OUT = 7'b0000011;
			4'b1100: OUT = 7'b1000110;
			4'b1101: OUT = 7'b0100001;
			4'b1110: OUT = 7'b0000110;
			4'b1111: OUT = 7'b0001110;
			
			default: OUT = 7'b0111111;
		endcase

	end
endmodule



